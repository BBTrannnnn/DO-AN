from flask import Blueprint, jsonify, request
from datetime import datetime
from models import db
from models.employees import Employee
from models.attendances import Attendance
from models.notification import Notification
from models.payrolls import Payroll
from routes.decorators import role_required
# -*- coding: utf-8 -*-

notification_bp = Blueprint('notifications', __name__)

@notification_bp.route('/generate', methods=['POST'])
@role_required('Admin')
def generate_notifications():
    today = datetime.today().date()
    count = 0

    employees = Employee.query.all()

    for emp in employees:
        # --- TH√îNG B√ÅO K·ª∂ NI·ªÜM L√ÄM VI·ªÜC ---
        if emp.working_status:
            working_years = (today - emp.working_status).days // 365
            if working_years in [1, 5, 10]:
                message = f"üéâ‚ú® Ch√∫c m·ª´ng {emp.name} ƒë√£ l√†m vi·ªác {working_years} nƒÉm t·∫°i c√¥ng ty! ü•≥üëè"
                notification = Notification(employee_id=emp.id, message=message)
                db.session.add(notification)
                count += 1

        # --- TH√îNG B√ÅO C·∫¢NH B√ÅO NGH·ªà PH√âP ---
        latest_attendance = Attendance.query.filter_by(employee_id=emp.id)\
                                            .order_by(Attendance.time.desc())\
                                            .first()
        if latest_attendance and latest_attendance.absence > 2:
            # Ki·ªÉm tra n·∫øu time l√† string v√† c√≥ ƒë·ªãnh d·∫°ng "MM/YYYY"
            if isinstance(latest_attendance.time, str):
                try:
                    # Chuy·ªÉn ƒë·ªïi t·ª´ "MM/YYYY" sang ki·ªÉu datetime
                    latest_time = datetime.strptime(latest_attendance.time, '%m/%Y')
                except ValueError:
                    # N·∫øu kh√¥ng kh·ªõp v·ªõi ƒë·ªãnh d·∫°ng, h√£y x·ª≠ l√Ω l·ªói ho·∫∑c b·ªè qua
                    continue
            else:
                latest_time = latest_attendance.time

            # Chuy·ªÉn ƒë·ªïi sang chu·ªói th√°ng/nƒÉm
            month_str = latest_time.strftime('%m/%Y')
            message = f"!!! Warning : {emp.name} ƒë√£ ngh·ªâ kh√¥ng ph√©p {latest_attendance.absence} ng√†y trong th√°ng {month_str}!"

            notification = Notification(employee_id=emp.id, message=message)
            db.session.add(notification)
            count += 1



        # --- TH√îNG B√ÅO CH√äNH L·ªÜCH L∆Ø∆†NG L·ªöN GI·ªÆA C√ÅC K·ª≤ ---
        payrolls = Payroll.query.filter_by(employee_id=emp.id)\
                                .order_by(Payroll.time.desc())\
                                .limit(2).all()

        if len(payrolls) == 2:
            current = payrolls[0]
            previous = payrolls[1]

            if previous.salary and previous.salary > 0:
                diff_percent = abs(current.salary - previous.salary) / previous.salary * 100
                threshold = 40  # Ng∆∞·ª°ng %

                if diff_percent > threshold:
                    message = (f"‚ö†Ô∏è Warning: L∆∞∆°ng th√°ng hi·ªán t·∫°i ({current.time.strftime('%m/%Y')}) c·ªßa {emp.name} "
                               f"ch√™nh l·ªách {diff_percent:.2f}% so v·ªõi th√°ng tr∆∞·ªõc ({previous.time.strftime('%m/%Y')}).")
                    notification = Notification(employee_id=emp.id, message=message)
                    db.session.add(notification)
                    count += 1

    db.session.commit()
    return jsonify({'message': f'ƒê√£ t·∫°o {count} th√¥ng b√°o.'}), 201


@notification_bp.route('/', methods=['GET'])
def get_notifications():
    all_notifications = Notification.query.order_by(Notification.created_at.desc()).all()
    return jsonify([n.to_dict() for n in all_notifications]), 200


@notification_bp.route('/<int:notification_id>', methods=['DELETE'])
@role_required('Admin')
def delete_notification(notification_id):
    notification = Notification.query.get(notification_id)
    if not notification:
        return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'}), 404

    db.session.delete(notification)
    db.session.commit()
    return jsonify({'message': 'X√≥a th√¥ng b√°o th√†nh c√¥ng!'}), 200